#include <iostream>
#include <vector>

int main()
{
	/* С++ позволяет изменять длину массива std::vector за счет использования функций push_back, erase, insert, resize и clear.

capacity в std::vector означает текущую выделенную память под хранение элементов. Она может быть больше, чем размер (size) вектора. Size представляет собой количество фактически использованных элементов в векторе.

shrink_to_fit – функция, которая позволяет уменьшить выделенную память для вектора до его размера, тем самым оптимизируя использование памяти.

resize - функция, которая изменяет размер вектора. Если новый размер больше текущего, то добавляются дополнительные элементы; если новый размер меньше текущего, то лишние элементы отбрасываются.

reserve - функция, которая резервирует память для заданного количества элементов. НО! Не заполняет выделенную память нулями, а оставляет мусор из памяти. Быстрее.

Знаки < и > при создании std::vector обозначают шаблонный аргумент типа. Например, std::vector создает вектор, содержащий элементы типа int.
*/
	
	// Пример работы push_back
	std::vector<int> vec1 = {1, 2, 3, 4, 5};
	vec1.push_back(1); // добавляет элемент 1 в конец вектора
	std::cout << "push_back --> " <<  vec1.front() << std::endl;

	// Пример работы erase
	std::vector<int> vec2 = {1, 2, 3, 4, 5};
	std::cout << "erase --> " <<  vec2[2];
	vec2.erase(vec2.begin() + 2); // удаляет 3-ий элемент (индексирование начинается с 0)
	std::cout << " --> " <<  vec2[2] << std::endl;

	// Пример работы insert
	std::vector<int> vec3 = {1, 2, 3, 4, 5};
	std::cout << "insert --> " <<  vec3[2];
	vec3.insert(vec3.begin() + 2, 10); // вставляет элемент 10 на 3-ю позицию
	std::cout << " --> " <<  vec3[2] << std::endl;
 
	// Пример работы clear
	std::vector<int> vec4 = {1, 2, 3, 4, 5};
	std::cout << "clear --> " <<  vec4[0];
	vec4.clear(); // очищает вектор, устанавливая размер и емкость в 0
	// std::cout << " --> " <<  vec4.at(0) << std::endl; // out_of_range

	// Пример работы at и []
	std::vector<int> vec5 = {1, 2, 3};
	int x = vec5.at(1); // получение значения второго элемента. При вызове, например, (3) - получим out_of_range
	int y = vec5[1]; // получение значения второго элемента. Границы не проверяются, быстрее, но опасно.
	

	/* Отличие функций at и [] в том, что at выполняет проверку границ (диапазона) и выбрасывает исключение std::out_of_range, если происходит выход за границы вектора, тогда как [] не выполняет такую проверку и может привести к неопределенному поведению, если происходит выход за границы вектора.

В С++ такое разделение функций было сделано для оптимизации выполнения операций при работе с векторами и для предоставления гибкости в выборе нужного метода в зависимости от требуемых гарантий безопасности. Это дает возможность выбрать баланс между производительностью и проверкой корректности использования вектора. 
*/
}